<%- include('../admin/layouts/header.ejs') %>
<%- include('../admin/layouts/sidebar.ejs') %>
<%- include('../admin/layouts/navbar.ejs') %>

<div class="main-panel">
  <div class="content-wrapper">
    <div class="col-12 grid-margin stretch-card">
      <div class="card">
        <div class="card-body">
          <h2 class="card-title">PRODUCTS</h2>
          <form class="forms-sample" action="" method="post" enctype="multipart/form-data" onsubmit="return validateForm()">
            <div class="row">
              <div class="col-md-6">
                <div class="form-group">
                  <label for="exampleInputName1">Product Name</label>
                  <input type="text" class="form-control text-white" id="exampleInputName1" name="productname" placeholder="Product Name">
                  <span id="productNameError" class="text-danger"></span>
                </div><br>
              </div>
              <div class="col-md-6">
                <div class="form-group">
                  <label for="category">Category</label>
                  <select class="form-control text-white" id="category" name="category" required>
                    <% Category.forEach(category => { %>
                    <option value="<%= category._id %>"><%= category.categoryName %></option>
                    <% }); %>
                  </select>
                </div>
              </div>
            </div>
            <div class="row">
              <div class="col-md-6">
                <div class="form-group">
                  <label for="size">Size</label>
                  <input type="text" class="form-control text-white" id="size" name="size" placeholder="Size">
                  <span id="sizeError" class="text-danger"></span>
                </div><br>
              </div>
              <div class="col-md-6">
                <div class="form-group">
                  <label for="price">Price</label>
                  <input type="text" class="form-control text-white" id="inlineFormInputName1" name="price" placeholder="Price">
                  <span id="priceError" class="text-danger"></span>
                </div><br>
              </div>
            </div>
            <div class="row">
              <div class="col-md-6">
                <div class="form-group">
                  <label for="quantity">Quantity</label>
                  <div class="input-group">
                    <input type="text" class="form-control text-white" id="quantity" name="quantity" placeholder="Quantity">
                  </div>
                  <span id="quantityError" class="text-danger"></span>
                </div>
              </div>
            </div>
            <div class="form-group">
              <label for="description">Description</label>
              <textarea class="form-control text-white" id="exampleTextarea1" rows="4" name="description"></textarea>
              <span id="descriptionError" class="text-danger"></span>
            </div><br>
            <div class="form-group">
              <label for="images1">Image 1</label>
              <div class="input-group col-xs-12">
                <input id="images1" type="file" name="images[]" multiple class="form-control btn btn-primary" placeholder="Upload Image" required>
                <span class="input-group-append"></span>
              </div>
              <div id="selectedImagesContainer1" class="selected-images-container"></div>
            </div>

            <div class="form-group">
              <label for="images2">Image 2</label>
              <div class="input-group col-xs-12">
                <input id="images2" type="file" name="images[]" multiple class="form-control btn btn-primary" placeholder="Upload Image" required>
                <span class="input-group-append"></span>
              </div>
              <div id="selectedImagesContainer2" class="selected-images-container"></div>
            </div>

            <div class="form-group">
              <label for="images3">Image 3</label>
              <div class="input-group col-xs-12">
                <input id="images3" type="file" name="images[]" multiple class="form-control btn btn-primary" placeholder="Upload Image" required>
                <span class="input-group-append"></span>
              </div>
              <div id="selectedImagesContainer3" class="selected-images-container"></div>
            </div>
              
            <div class="row mt-5">
              <div class="col-md-12 text-center">
                <button type="submit" class="btn btn-primary mr-2">Submit</button>
                <button class="btn btn-dark" id="cancelButton">Cancel</button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // ========== image deleting ==============
  document.addEventListener("DOMContentLoaded", function () {
    const addImageButton = document.querySelector(".add-image-input");
    const dynamicImageInputs = document.querySelector(".dynamic-image-inputs");
    addImageButton.addEventListener("click", function () {
      const inputGroup = document.createElement("div");
      inputGroup.className = "input-group";
      const inputFile = document.createElement("input");
      inputFile.type = "file";
      inputFile.name = "images";
      inputFile.className = "form-control";
      inputFile.required = true;
      const inputGroupAppend = document.createElement("div");
      inputGroupAppend.className = "input-group-append";
      const removeButton = document.createElement("button");
      removeButton.className = "btn btn-danger remove-image-input";
      removeButton.type = "button";
      removeButton.textContent = "Remove";
      removeButton.addEventListener("click", function () {
        inputGroup.remove();
      });
      inputGroupAppend.appendChild(removeButton);
      inputGroup.appendChild(inputFile);
      inputGroup.appendChild(inputGroupAppend);
      dynamicImageInputs.appendChild(inputGroup);
    });
  });

  // ========== validation ========
  
  function validateForm() {
    const productName = document.getElementById("exampleInputName1").value;
    const category = document.getElementById("category").value;
    const size = document.getElementById("size").value;
    const price = parseFloat(document.getElementById("inlineFormInputName1").value);
    const quantity = parseInt(document.getElementById("quantity").value);
    const description = document.getElementById("exampleTextarea1").value;

    console.log("Product Name:", productName);
  console.log("Category:", category);
  console.log("Size:", size);
  console.log("Price:", price);
  console.log("Quantity:", quantity);
  console.log("Description:", description);

    const imageInputs = document.querySelectorAll('[id^="images"]');
    let hasSelectedImages = false;

    // Loop through all image inputs
    imageInputs.forEach((imageInput, index) => {
      const selectedFiles = imageInput.files;
      if (selectedFiles.length > 0) {
        hasSelectedImages = true;
      }
    });

    if (productName.trim() === "") {
      document.getElementById("productNameError").textContent = "Product Name is required.";
      return false;
    } else {
      document.getElementById("productNameError").textContent = "";
    }

  

    if (size.trim() === "") {
      document.getElementById("sizeError").textContent = "Size is required.";
      return false;
    } else {
      document.getElementById("sizeError").textContent = "";
    }

    if (isNaN(price) || price <= 0) {
      document.getElementById("priceError").textContent = "Price must be a valid number greater than 0.";
      return false;
    } else {
      document.getElementById("priceError").textContent = "";
    }

    if (isNaN(quantity) || quantity < 0) {
      document.getElementById("quantityError").textContent = "Quantity must be a valid number of at least 0.";
      return false;
    } else {
      document.getElementById("quantityError").textContent = "";
    }

    if (description.trim() === "") {
      document.getElementById("descriptionError").textContent = "Description is required.";
      return false;
    } else {
      document.getElementById("descriptionError").textContent = "";
    }

    if (!hasSelectedImages) {
      document.getElementById("imageError").textContent = "Please select at least one image.";
      return false;
    } else {
      document.getElementById("imageError").textContent = "";
    }

    return true;
  }


  // ========== cancel button redirecting ==========
  document.addEventListener("DOMContentLoaded", function () {
    const cancelButton = document.getElementById("cancelButton");
    cancelButton.addEventListener("click", function () {
      window.location.href = "/admin/view_products"; 
    });
  });
</script>


<script>
  document.addEventListener("DOMContentLoaded", function () {
    const fileInputs = document.querySelectorAll('[id^="images"]');
    fileInputs.forEach((fileInput, index) => {
      fileInput.addEventListener('change', (event) => handleImageSelect(event, index + 1));
    });
  });

  function handleImageSelect(event, index) {
    const files = event.target.files;
    const selectedImagesContainer = document.getElementById(`selectedImagesContainer${index}`);
    selectedImagesContainer.innerHTML = '';

    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      const reader = new FileReader();

      reader.onload = function (e) {
        const image = document.createElement('img');
        image.src = e.target.result;
        image.classList.add('selected-image');

        // Assign a unique identifier to the image
        const imageId = `image_${index}_${i}`;
        image.setAttribute('id', imageId);

        image.addEventListener('click', function () {
          openImagePopup(e.target.result, imageId);
        });

        selectedImagesContainer.appendChild(image);

        // Initialize Cropper for each image
        const cropper = new Cropper(image, {
          aspectRatio: 1, // Set your desired aspect ratio
          viewMode: 1, // Contain within the container
        });
      };

      reader.readAsDataURL(file);
    }
  }

  function openImagePopup(imageSrc, imageId) {
    const popupOverlay = document.createElement('div');
    popupOverlay.classList.add('image-popup-overlay');

    const popupContainer = document.createElement('div');
    popupContainer.classList.add('image-popup-container');

    const popupImage = document.createElement('img');
    popupImage.classList.add('image-popup');
    popupImage.src = imageSrc;
    popupContainer.appendChild(popupImage);

    const cropper = new Cropper(popupImage, {
      aspectRatio: 1, // Allow free-form cropping
      viewMode: 1, // Contain within the container
    });

    const cropButton = document.createElement('button');
    cropButton.textContent = 'Crop';
    cropButton.classList.add('crop-button');
    cropButton.addEventListener('click', function () {
      const croppedCanvas = cropper.getCroppedCanvas();
      // Use the croppedCanvas for further processing or display
      console.log(croppedCanvas);

      // Set the data attribute to mark the image as cropped
      document.getElementById(imageId).dataset.cropped = 'true';

      // Remove the popup and overlay
      document.body.removeChild(popupOverlay);
    });

    const saveButton = document.createElement('button');
    saveButton.textContent = 'Save';
    saveButton.classList.add('save-button');
    saveButton.addEventListener('click', function () {
      const croppedCanvas = cropper.getCroppedCanvas();
      const croppedImage = croppedCanvas.toDataURL('image/jpeg');
      // Use the croppedImage for further processing or upload

      // Replace the original image with the cropped image
      document.getElementById(imageId).src = croppedImage;
      // Set the data attribute to mark the image as cropped
      document.getElementById(imageId).dataset.cropped = 'true';

      // Remove the popup and overlay
      document.body.removeChild(popupOverlay);
    });

    popupContainer.appendChild(cropButton);
    popupContainer.appendChild(saveButton);

    popupOverlay.appendChild(popupContainer);
    document.body.appendChild(popupOverlay);

    popupOverlay.addEventListener('click', function (event) {
      if (event.target === popupOverlay) {
        closeImagePopup(popupOverlay);
      }
    });
  }

  function closeImagePopup(popupOverlay) {
    document.body.removeChild(popupOverlay);
  }

  function cancelForm() {
    window.location.href = '/admin/home';
  }

  // ... (existing scripts)

</script>

<%- include('../admin/layouts/footer.ejs') %>
