<%- include('../admin/layouts/header.ejs') %>
<%- include('../admin/layouts/sidebar.ejs') %>
<%- include('../admin/layouts/navbar.ejs') %>

<div class="main-panel">
  <div class="content-wrapper">
    <div class="col-12 grid-margin stretch-card">
      <div class="card">
        <div class="card-body">
          <h2 class="card-title">PRODUCTS</h2>
          <form id="addProductForm" class="forms-sample" action="" method="post" enctype="multipart/form-data" onsubmit="return validateForm()">
            <div class="row">
              <div class="col-md-6">
                <div class="form-group">
                  <label for="exampleInputName1">Product Name</label>
                  <input type="text" class="form-control text-white" id="exampleInputName1" name="productname" placeholder="Product Name">
                  <span id="productNameError" class="text-danger"></span>
                </div><br>
              </div>
              <div class="col-md-6">
                <div class="form-group">
                  <label for="category">Category</label>
                  <select class="form-control text-white" id="category" name="category" required>
                    <% Category.forEach(category => { %>
                    <option value="<%= category._id %>"><%= category.categoryName %></option>
                    <% }); %>
                  </select>
                </div>
              </div>
            </div>
            <div class="row">
              <div class="col-md-6">
                <div class="form-group">
                  <label for="size">Size</label>
                  <input type="text" class="form-control text-white" id="size" name="size" placeholder="Size">
                  <span id="sizeError" class="text-danger"></span>
                </div><br>
              </div>
              <div class="col-md-6">
                <div class="form-group">
                  <label for="price">Price</label>
                  <input type="text" class="form-control text-white" id="inlineFormInputName1" name="price" placeholder="Price">
                  <span id="priceError" class="text-danger"></span>
                </div><br>
              </div>
            </div>
            <div class="row">
              <div class="col-md-6">
                <div class="form-group">
                  <label for="quantity">Quantity</label>
                  <div class="input-group">
                    <input type="text" class="form-control text-white" id="quantity" name="quantity" placeholder="Quantity">
                  </div>
                  <span id="quantityError" class="text-danger"></span>
                </div>
              </div>
            </div>
            <div class="form-group">
              <label for="description">Description</label>
              <textarea class="form-control text-white" id="exampleTextarea1" rows="4" name="description"></textarea>
              <span id="descriptionError" class="text-danger"></span>
            </div><br>
            <div class="row d-flex justify-content-center">
              <!-- Image 1 -->
              
              <div class="col-lg-3">
                <div id="imagePreview1" class="image-preview"></div>
                <label for="imageInput1" class="image-label">Image 1
                    <input name="images" type="file" accept="image/*" id="imageInput1" class="form-control-file" required>
                </label>
                <p id="image-error1" class="error-message"></p>
                <!-- Add a hidden input field for the cropped image data -->
                <input type="hidden" name="croppedImageData1" id="croppedImageData1">
                <p id="cropped-image-error1" class="error-message"></p>
            </div>
            <!-- Image 2 -->
            <div class="col-lg-3">
              <div id="imagePreview2" class="image-preview"></div>
                <label for="imageInput2" class="image-label">Image 2
                    <input name="images" type="file" accept="image/*" id="imageInput2" class="form-control-file" required>
                </label>
                <p id="image-error2" class="error-message"></p>
                <!-- Add a hidden input field for the cropped image data -->
                <input type="hidden" name="croppedImageData2" id="croppedImageData2">
                <p id="cropped-image-error2" class="error-message"></p>
            </div>
            <!-- Image 3 -->
            <div class="col-lg-3">
              <div id="imagePreview3" class="image-preview"></div>
                <label for="imageInput3" class="image-label">Image 3
                    <input name="images" type="file" accept="image/*" id="imageInput3" class="form-control-file" required>
                </label>
                <p id="image-error3" class="error-message"></p>
                <!-- Add a hidden input field for the cropped image data -->
                <input type="hidden" name="croppedImageData3" id="croppedImageData3">
                <p id="cropped-image-error3" class="error-message"></p>
            </div>
            <!-- Image 4 -->
            
            </div>
            <div class="row mt-5">
              <div class="col-md-12 text-center">
                <button type="submit" class="btn btn-primary mr-2">Submit</button>
                <button class="btn btn-dark" id="cancelButton">Cancel</button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .crop-image {
    max-width: 15cm;
    max-height: 10cm;
    width: 100%; /* Ensure the image takes the full width of the container */
    height: auto; /* Maintain aspect ratio */
    display: inline-block;
    margin-right: 10px; /* Adjust as needed for spacing between crop boxes */
  }
</style>

<script>
  // ========== image deleting ==============
  document.addEventListener("DOMContentLoaded", function () {
    const addImageButton = document.querySelector(".add-image-input");
    const dynamicImageInputs = document.querySelector(".dynamic-image-inputs");
    addImageButton.addEventListener("click", function () {
      const inputGroup = document.createElement("div");
      inputGroup.className = "input-group";
      const inputFile = document.createElement("input");
      inputFile.type = "file";
      inputFile.name = "images";
      inputFile.className = "form-control";
      inputFile.required = true;
      const inputGroupAppend = document.createElement("div");
      inputGroupAppend.className = "input-group-append";
      const removeButton = document.createElement("button");
      removeButton.className = "btn btn-danger remove-image-input";
      removeButton.type = "button";
      removeButton.textContent = "Remove";
      removeButton.addEventListener("click", function () {
        inputGroup.remove();
      });
      inputGroupAppend.appendChild(removeButton);
      inputGroup.appendChild(inputFile);
      inputGroup.appendChild(inputGroupAppend);
      dynamicImageInputs.appendChild(inputGroup);
    });
  });

  // ========== validation ========
  
  function validateForm() {
    const productName = document.getElementById("exampleInputName1").value;
    const category = document.getElementById("category").value;
    const size = document.getElementById("size").value;
    const price = parseFloat(document.getElementById("inlineFormInputName1").value);
    const quantity = parseInt(document.getElementById("quantity").value);
    const description = document.getElementById("exampleTextarea1").value;
    document.getElementById('image-error1').textContent = '';
        document.getElementById('image-error2').textContent = '';
        document.getElementById('image-error3').textContent = '';
    
        document.getElementById('cropped-image-error1').textContent = '';
        document.getElementById('cropped-image-error2').textContent = '';
        document.getElementById('cropped-image-error3').textContent = '';
 

    console.log("Product Name:", productName);
  console.log("Category:", category);
  console.log("Size:", size);
  console.log("Price:", price);
  console.log("Quantity:", quantity);
  console.log("Description:", description);

   

    if (productName.trim() === "") {
      document.getElementById("productNameError").textContent = "Product Name is required.";
      return false;
    } else {
      document.getElementById("productNameError").textContent = "";
    }

  

    if (size.trim() === "") {
      document.getElementById("sizeError").textContent = "Size is required.";
      return false;
    } else {
      document.getElementById("sizeError").textContent = "";
    }

    if (isNaN(price) || price <= 0) {
      document.getElementById("priceError").textContent = "Price must be a valid number greater than 0.";
      return false;
    } else {
      document.getElementById("priceError").textContent = "";
    }

    if (isNaN(quantity) || quantity < 0) {
      document.getElementById("quantityError").textContent = "Quantity must be a valid number of at least 0.";
      return false;
    } else {
      document.getElementById("quantityError").textContent = "";
    }

    if (description.trim() === "") {
      document.getElementById("descriptionError").textContent = "Description is required.";
      return false;
    } else {
      document.getElementById("descriptionError").textContent = "";
    }

    const imageInputs = document.querySelectorAll('input[type="file"]');
        for (let i = 0; i < imageInputs.length; i++) {
            const imageInput = imageInputs[i];
            const imageError = document.getElementById(`image-error${i + 1}`);
            const croppedImageError = document.getElementById(`cropped-image-error${i + 1}`);
            const croppedImageData = document.getElementById(`croppedImageData${i + 1}`).value;

            if (!imageInput.files.length) {
                imageError.textContent = `Please upload Image ${i + 1}.`;
                return false;
            }

            // You can add additional image validation here if needed.

            // Validate cropped images
            if (!croppedImageData) {
                croppedImageError.textContent = `Please save Cropped Image ${i + 1}.`;
                return false;
            }

            // Clear the image errors if validation passes
            imageError.textContent = '';
            croppedImageError.textContent = '';
        }

    return true;
  }


  // ========== cancel button redirecting ==========
  document.addEventListener("DOMContentLoaded", function () {
    const cancelButton = document.getElementById("cancelButton");
    cancelButton.addEventListener("click", function () {
      window.location.href = "/admin/view_products"; 
    });
  });
</script>


<script defer>
  document.addEventListener('DOMContentLoaded', function () {
    if (typeof Cropper !== 'undefined') {
      var imageInputs = document.querySelectorAll('[id^="imageInput"]');
      var form = document.getElementById('addProductForm');

      imageInputs.forEach(function (input, index) {
        var cropper;
        var imgElement = document.createElement('img');

        imgElement.classList.add('crop-image');
        input.parentNode.insertBefore(imgElement, input.nextSibling);

        var previewContainer = document.createElement('div');
        previewContainer.id = 'imagePreview' + (index + 1);
        previewContainer.classList.add('image-preview');
        input.parentNode.insertBefore(previewContainer, imgElement.nextSibling);

        input.addEventListener('change', function (e) {
          var files = e.target.files;
          if (files && files[0]) {
            var reader = new FileReader();
            reader.onload = function (event) {
              imgElement.src = event.target.result;

              cropper = new Cropper(imgElement, {
                aspectRatio: 1,
                viewMode: 2,
                autoCropArea: 1,
              });

              input.addEventListener('click', function (event) {
                event.preventDefault();
              });

              var saveButton = document.createElement('button');
              saveButton.innerText = 'Save Cropped Image';
              saveButton.addEventListener('click', function (event) {
                event.preventDefault();

                // Get the cropped canvas
                var croppedCanvas = cropper.getCroppedCanvas();

                // Convert canvas to data URL
                var croppedImageData = croppedCanvas.toDataURL('image/jpeg', 0.8); // Adjust quality as needed (0 to 1)
                console.log('Cropped Image Data:', croppedImageData);

                // Set the value of the hidden input with the cropped image data
                document.getElementById('croppedImageData' + (index + 1)).value = croppedImageData;

                // Convert data URI to File
                var fileName = 'cropped_image_' + (index + 1) + '.jpeg';
                var croppedImageFile = dataURItoFile(croppedImageData, fileName);

                // Append the File to the FormData object
                var formData = new FormData(form);
                formData.append('croppedImage' + (index + 1), croppedImageFile);

                // Display the preview of the cropped image
                var previewImage = document.createElement('img');
                previewImage.src = croppedImageData;
                previewContainer.innerHTML = '';
                previewContainer.appendChild(previewImage);
              });

              imgElement.parentNode.insertBefore(saveButton, imgElement.nextSibling);
            };

            reader.readAsDataURL(files[0]);
          }
        });
      });

      document.getElementById('cropAndSubmit').addEventListener('click', function (event) {
        event.preventDefault();
        if (validateForm()) {
          cropImagesAndSubmit();
        }
      });

      function cropImagesAndSubmit() {
        form.submit();
      }

    } else {
      console.error('CropperJS is not defined. Check the CDN script paths.');
    }
  });

  function dataURItoFile(dataURI, fileName) {
  var byteString = atob(dataURI.split(',')[1]);
  var extension = fileName.split('.').pop(); // Get the file extension from the fileName

  var ab = new ArrayBuffer(byteString.length);
  var ia = new Uint8Array(ab);
  for (var i = 0; i < byteString.length; i++) {
    ia[i] = byteString.charCodeAt(i);
  }

  // Use the file extension as the MIME type when creating the Blob
  var blob = new Blob([ab], { type: 'image/' + extension });
  return new File([blob], fileName, { type: 'image/' + extension });
}
</script>




<%- include('../admin/layouts/footer.ejs') %>
